

var app = angular.module('murnow', ['ui.router','templates', 'Devise', 'ui.bootstrap', 'ngMaterial','ngCookies', 'angularFileUpload','infinite-scroll','ngTouch','ngImgCrop','ngAnimate','murnowFilters','reviewCard','ngMessages']);

app.config(['$mdThemingProvider',function($mdThemingProvider) {


 var pinkMurnow = $mdThemingProvider.extendPalette('pink', {
    '500': 'FFAABB'
  });
  $mdThemingProvider.definePalette('pinkmurnow', pinkMurnow);

 $mdThemingProvider.theme('default')
    .primaryPalette('pinkmurnow');

}]);


app.constant('configMurnow', {
  'enviroment':  "<%= Rails.env %>",
  'cdn_domain_name':"d3gm19tlfubzts.cloudfront.net"
});



app.config([
'$stateProvider',
'$urlRouterProvider',
'$locationProvider',
'$provide',
function($stateProvider, $urlRouterProvider,$locationProvider, $rootScope, $mdDialog, $provide) {


   /*************************** DON'T CREATE ANY STATE NAME WITH 'users' SUBSTRING!!! ***************************/
  $locationProvider.html5Mode(true);
  $stateProvider
    .state('home', {  // CAMBIAR ESTOOOOOOO
      url: '/',
      templateUrl: 'home/_reviews.html',
      controller: 'MainCtrl',
      resolve: {
	  		productsPromise: [ 'products', function( products) {
	        	return products.getMostPopularReviews();
	        }]
      }
    })
    .state('list_products', {  // CAMBIAR ESTOOOOOOO
      url: '/list_products/:searchQuery',
      templateUrl: 'list_products/_products_list.html',
      controller: 'ListProducts',
      resolve: {
        productsPromise: ['products','$stateParams', function(products, $stateParams){        
	       if( $stateParams.searchQuery === products.searchQuery) { // If qhe searchQuery is the same than in the last we don't do again the request.
		       angular.copy(products.accumulateProducts,  products.products.search);
		       return products;
	       } else {
		       products.accumulateProducts = [];
		       return products.searchFirstPage($stateParams.searchQuery);
	       }     
        }]
      }
    })
    .state('trending_products', {  // CAMBIAR ESTOOOOOOO
      url: '/trending_products/:list',
      templateUrl: 'trending_products/_trending_list_products.html',
      controller: 'TrendingListProductsCtrl',
      resolve: {
        productsPromise: ['products','$stateParams', function(products, $stateParams){        
		    return products.getTrendingProducts($stateParams.list);
	            
        }]
      }
    })
    .state('forgotpassword', {
      url: '/forgotpassword',
      templateUrl: 'auth/_forgotpassword.html',
      controller: 'AuthCtrl'
    })
     .state('profile', {
      url: '/profile/{id}',
      templateUrl: 'profile/_profile.html',
      controller: 'Profile',
    })
    .state('edit_profile', {
      url: '/edit_profile',
      onEnter: function(){
	   //event.preventDefault();   //this was before without comments may can cause an old bug but if dont remove this change state for firefox is not working
       //event.stopPropagation();
  	  },
      templateUrl: 'profile/_edit_profile.html',
      controller: 'EditProfileCtrl'
    })
    .state('resetpassword', {
      url: '/resetpassword?resetToken',
      templateUrl: 'auth/_resetpassword.html',
      controller: 'AuthCtrl'
    })
    .state('products', {
  		url: '/products/{id}',
  		templateUrl: 'products/_products.html',
  		controller: 'ProductCtrl',
  		resolve: {
	  		product: ['$stateParams', 'products', function($stateParams, products) {
	        	return products.get($stateParams.id);
	        	$state.go('profile');
	        }]
      	},
      	onEnter: function(){
	  		
  		}
	});

  
  $urlRouterProvider.otherwise('/');

}]);

   document.addEventListener('backbutton',function(e){
            console.log("history is "+history.length);
            if(history.length === 1){
                e.preventDefault();
            }
            
        });

app.run(['$rootScope','$location', '$mdDialog','$state','$anchorScroll',function($rootScope,$location, $mdDialog, $state, $anchorScroll) {
	   var lock = false;
	
  	$rootScope.$on('$locationChangeStart', function(event, toState, toParams, fromState, fromParams){ 
	    /*if ( $('md-dialog').length === 1) {
		     	 event.preventDefault();
		    	 $mdDialog.cancel()
		    	 document.addEventListener("backbutton", onBackKeyDown, false);
		    	
	    } else {
		    
	    }*/
       
    });
 
    $rootScope.closeDialog = function() {
            $mdDialog.hide();
    };
  
    
  if ($location.path() == "/users/sign_in") {
    $rootScope.deregistration_login_after_confirmation = $rootScope.$on('$stateChangeStart', function(event, toState, toParams, fromState, fromParams){ 
	    
        $mdDialog.show({
            controller: 'AuthCtrl',
            templateUrl: 'auth/_login.html',
            hasBackdrop: true,
            clickOutsideToClose: true
          });
        $rootScope.deregistration_login_after_confirmation();
        delete $rootScope.deregistration_login_after_confirmation;
    });
  }

  
    
   $rootScope.$on('$stateChangeSuccess', function(event, toState,   toParams , fromState, fromParams){    
	   $("md-autocomplete-wrap input").blur(); // This fix a bug in mobile 
	  $rootScope.pageTitle = "Makeup Reviews Now"; // Default title
	  	if(toState.name === "products" && fromState.name === "list_products") {
		  	$rootScope.scrollProductsPosition = $("md-content").scrollTop();
		    $("md-content").scrollTop(0);
	  	} else if (toState.name === "list_products" && fromState.name === "products") {
		  	$("md-content").scrollTop($rootScope.scrollProductsPosition);
	  	} else {
		  	$("md-content").scrollTop(0);
	  	}
	  	
	  
		
	    	
		switch(toState.name) {
		    case 'home':
		        $rootScope.isHomePage = true;
		        break;
		    default:
		        $rootScope.isHomePage = false;
		}										 
   });
   
    $rootScope.getCurrentNameState = function() {
        return $state.current.name;
    };
    
    $rootScope.trendingProductsLipstick = function (listQuery){
			$state.go('trending_products', { list: listQuery});
    }

}]);
